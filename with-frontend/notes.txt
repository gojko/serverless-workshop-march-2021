# Create stack parameter - new top-level section

Parameters:
  VerboseLog:
    Type: String
    Default: ''
    Description: 'Set to something to provide detailed logging'

# Pass stack parameter as an environment variable to a function

  PollManagementFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          DEBUG: !Ref VerboseLog


# allow cross-origin access in API - note you may want to restrict AllowOrigin in real apps

Globals:
  Api:
    Cors:
      AllowHeaders: "'Content-Type'"
      AllowOrigin: "'*'"
      MaxAge: "'3600'"

# deploy SAM with nested templates

sam deploy -g --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND --stack-name poller-frontend

- make sure to provide the API URL when asked


# update a field with Dynamo

  await dynamoDbClient.update({
    Key: {pollId},
    UpdateExpression: 'SET totalVotes = totalVotes + :inc',
    ExpressionAttributeValues: {
      ':inc': 1
    }
  }).promise();

# update a potentially non-existing field with Dynamo

  await dynamoDbClient.update({
    Key: {pollId},
    UpdateExpression: 'SET totalVotes = if_not_exists(totalVotes, :zero) + :inc',
    ExpressionAttributeValues: {
      ':inc': 1,
      ':zero': 0
    }
  }).promise();

# update a field with dynamic name (parameter mapping)

  UpdateExpression: 'SET counts.#answer = if_not_exists(counts.#answer, :zero) + :inc',
  ExpressionAttributeNames: {
    '#answer': votedOption
  },

# prevent dynamo update from creating a record if it does not exist

	ConditionExpression: 'attribute_exists(pollId)'

# Allow notifications from Dynamo

  PollingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      StreamSpecification:
        StreamViewType: "NEW_IMAGE"

# more information on dynamo streams

https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-table-streamspecification.html

# Trigger Lambda when a DynamoDB event fires

  ExportResultsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        VoteUpdated:
          Type: DynamoDB
          Properties:
            BatchSize: 100
            Enabled: True
            Stream: !GetAtt PollingTable.StreamArn
            StartingPosition: "LATEST"

# DynamoDB cloudFormation properties

https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html

# More information about DynamoDB events

https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-dynamodb.html

# use SAM to generate test events

sam local generate-event -h

sam local generate-event dynamodb update

# Turn Dynamo events into an array of plain objects

event.Records.map(r => aws.DynamoDB.Converter.unmarshall(r.dynamodb.NewImage))

# check logs for function by name

sam logs -n ExportResultsFunction --stack-name poller-backend

# tail logs (continuously watch them)

sam logs -n ExportResultsFunction --stack-name poller-backend --tail

# SQS CloudFormation properties

https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html

# SQS Queue Resource

  ExportResultsQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      MessageRetentionPeriod: 3600

# SQS Security Policies documentation

https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-basic-examples-of-iam-policies.html

# Required policies to publish SQS messages

      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - "sqs:SendMessage"
            Resource: !GetAtt ExportResultsQueue.Arn

# Tell Lambda to access the Queue

      Environment:
        Variables:
          RESULTSQUEUE: !Ref ExportResultsQueue

# Send messages to SQS

const sqs = new aws.SQS();
this.publish = async function (pollId, results) {
		await sqs.sendMessage({
			QueueUrl: queue,
			MessageBody: JSON.stringify(results),
			MessageGroupId: pollId,
			MessageDeduplicationId: pollId + requestId
		}).promise();
	};


# add a sub-stack

  WebsocketsComponent:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: websockets.yaml
      Parameters:
        GroupName: "pollId"
        VerboseLog: !Ref VerboseLog
        MessageSQSQueue: !GetAtt ExportResultsQueue.Arn

# extract an output from the substack

!GetAtt WebsocketsComponent.Outputs.WebSocketURI

# allow a function to query an index

      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - "dynamodb:Query"
              Resource: !Sub "${TableArn}/index/${IndexName}"

# Add capability to existing samconfig.toml

capabilities = "CAPABILITY_IAM CAPABILITY_AUTO_EXPAND"

# Create an index on DynamoDB

ConnectionsTable:
  Type: AWS::DynamoDB::Table
  Properties:
    KeySchema:
      - AttributeName: "connectionId"
        KeyType: "HASH"
    GlobalSecondaryIndexes:
      - IndexName: "IndexByPollId"
        KeySchema:
          - AttributeName: "pollId" 
            KeyType: "HASH"
        Projection:
          ProjectionType: KEYS_ONLY

# Query by index

const response = await dynamoDbClient.query({
    IndexName: groupIndexName,
    KeyConditionExpression: '#GroupName = :GroupName',
    ExpressionAttributeNames: {
      '#GroupName': 'pollId',
    },
    ExpressionAttributeValues: {
      ':GroupName': '1234567' 
    },
    Limit: PAGE_SIZE,
    ExclusiveStartKey: fromPageKey
  }).promise()

# Trigger a lambda function from SQS

SendToGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !Ref MessageSQSQueue
            BatchSize: 10
            Enabled: true

# enable XRay tracing in template

Globals:
  Api:
    TracingEnabled: true
  Function:
    Tracing: "Active"

# enable XRay tracing in function

const AWSXRay = require('aws-xray-sdk-core'),
  // instead of aws = require('aws-sdk')
	aws = AWSXRay.captureAWS(require('aws-sdk'));

AWSXRay.setContextMissingStrategy(() => {});

exports.handler = async (event) => {

# install xray library (in each function)

npm install aws-xray-sdk-core

# deploy with dependencies

sam build

sam deploy

